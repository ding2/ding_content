<?php

include_once('ding_content.features.inc');

/**
 * @file
 * Various integration with panels to create panel panes and more.
 */

/**
 * Implements hook_menu().
 */
function ding_content_menu() {
  $items = array();

  $items['ding_content/media'] = array(
    'title' => 'Media browser list',
    'description' => 'Ajax Callback for getting media',
    'page callback' => 'ding_content_media_browser_list',
    'access callback' => 'media_access',
    'access arguments' => array('view'),
    'type' => MENU_CALLBACK,
    'file' => 'ding_content.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_enable().
 *
 * Create taxonomy vocabolary if needed.
 */
function ding_content_enable() {
  // Create wysiwyg profile if needed.
  if (!wysiwyg_profile_load('ding_wysiwyg')) {
    $wysiwyg = array(
      'format' => 'ding_wysiwyg',
      'editor' => 'ckeditor',
      'settings' => array(
        'default' => 1,
        'user_choose' => 0,
        'show_toggle' => 1,
        'theme' => 'advanced',
        'language' => 'da',
        'buttons' => array(
          'default' => array(
            'Bold' => 1,
            'Italic' => 1,
            'Underline' => 1,
            'JustifyLeft' => 1,
            'JustifyCenter' => 1,
            'JustifyRight' => 1,
            'BulletedList' => 1,
            'NumberedList' => 1,
            'Undo' => 1,
            'Redo' => 1,
            'Link' => 1,
            'Unlink' => 1,
            'Anchor' => 1,
            'TextColor' => 1,
            'BGColor' => 1,
            'Blockquote' => 1,
            'Cut' => 1,
            'Copy' => 1,
            'Paste' => 1,
            'PasteText' => 1,
            'PasteFromWord' => 1,
            'RemoveFormat' => 1,
            'Format' => 1,
            'Font' => 1,
            'FontSize' => 1,
            'Styles' => 1,
            'Table' => 1,
            'CreateDiv' => 1,
          ),
          'drupal' => array(
            'media' => 1,
          ),
        ),
        'toolbar_loc' => 'top',
        'toolbar_align' => 'left',
        'path_loc' => 'bottom',
        'resizing' => 1,
        'verify_html' => 1,
        'preformatted' => 0,
        'convert_fonts_to_spans' => 1,
        'remove_linebreaks' => 1,
        'apply_source_formatting' => 0,
        'paste_auto_cleanup_on_paste' => 0,
        'block_formats' => 'p,address,pre,h2,h3,h4,h5,h6,div',
        'css_setting' => 'theme',
        'css_path' => '',
        'css_classes' => '',
      ),
    );
    $wysiwyg['settings'] = serialize($wysiwyg['settings']);
    drupal_write_record('wysiwyg', $wysiwyg);
    wysiwyg_profile_cache_clear();
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function ding_content_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/content_types';
  }
}

/**
 * Implements hook_media_browser_plugin_info().
 */
function ding_content_media_browser_plugin_info() {
  $plugins = array();

  $plugins['ding_content'] = array(
    '#weight' => 0,
  );

  return $plugins;
}

/**
 * Implementaion of hook_media_browser_plugin_view().
 */
function ding_content_media_browser_plugin_view($plugin_name, $params) {
  $media_path = drupal_get_path('module', 'media');
  $path = drupal_get_path('module', 'ding_content');

  $params += array(
    'types' => array(),
    'multiselect' => FALSE,
  );

  switch ($plugin_name) {
    case 'ding_content':
      return array(
        '#title' => t('Personal library'),
        '#attached' => array(
          'js' => array(
            $media_path . '/js/plugins/media.library.js',
            $path . '/js/ding_content.media.js',
          ),
          'css' => array(
            //@todo: should move this.
            $media_path . '/js/plugins/media.library.css',
            $path . '/css/ding_content.media.css',
          ),
        ),
        '#settings' => array(
          'viewMode' => 'thumbnails',
          'getMediaUrl' => url('ding_content/media'),
        // We should probably change this to load dynamically when requested
        // via the JS file.
        ) + $params,
        '#markup' => '<div id="container"><div id="scrollbox"><ul id="media-browser-library-list" class="media-list-thumbnails"></ul><div id="status"></div></div></div>',
      );

    break;
  }

  return array();
}

/**
 * Implements hook_field_widget_info().
 */
function ding_content_field_widget_info() {
  return array(
    'ding_content_group_audience_library' => array(
      'label' => t('Library audience'),
      'field types' => array('group'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
      ),
      'settings' => array(
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 *
 * Based on og_field_widget_form().
 */
function ding_content_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $base) {
  $element = $base;
  $widget = $instance['widget'];

  switch ($widget['type']) {
    case 'ding_content_group_audience_library':
      // Determine if a user may see other groups as-well.
      $opt_group = FALSE;

      if (user_access('administer group')) {
        $opt_group = TRUE;
      }

      // Get all the groups divided to "content groups" and "other groups".
      $audience = og_field_audience_options($opt_group);

      // Get all groups that should be excluded.
      $excludes = array();
      // If it's an existing group, then exclude itself, as in some cases a group
      // can act also as a group content, but we want to prevent associating the
      // group to itself.
      if (!empty($form['#' . $element['#entity_type']])) {
        list($id) = entity_extract_ids($element['#entity_type'], $form['#' . $element['#entity_type']]);
        if (($group = og_get_group($element['#entity_type'], $id))) {
          $excludes[$group->gid] = $group->gid;
        }
      }

      // Get default values from URL, or from the edited entity.
      $default_values = og_get_context_by_url();
      // Keep the group ID of the selected items, as they might be needed again,
      // and we don't want to iterate over the items again.
      $items_gid = array();
      if (!empty($items)) {
        foreach ($items as $item) {
          // Some groups might be already deleted, but we don't bulk
          // delete the fields of the entities associated with that group.
          // So make sure the hidden selected fields are only for existing
          // groups.
          if (in_array($item['gid'], $audience['content groups']) || in_array($item['gid'], $audience['other groups'])) {
            $default_values[$item['gid']] = $item['gid'];
            $items_gid[] = $item['gid'];
          }
        }
      }

      foreach (array('content groups', 'other groups') as $key) {
        if (!empty($audience[$key])) {
          // Get the label un-sanitized, as they will be laster sanitized
          // according to the form type.
          $audience[$key] = og_label_multiple($audience[$key], FALSE);
        }
      }

      // The group options presented to the user.
      $options = array();
      $hidden_selected_gids = array();
      $type = 'select';
      if ($opt_group) {
        // Show "My groups" and "Other groups".
        if ($my_groups = array_diff_key($audience['content groups'], $excludes)) {
          $options += $my_groups;
        }
        if ($other_groups = array_diff_key($audience['other groups'], $excludes)) {
          $options += $other_groups;
        }
      }
      else {
        // Show only "My groups".
        $options = array_diff_key($audience['content groups'], $excludes);
        // If there are items that are already selected but the user doesn't
        // have access to them, we need to keep track of them.
        $hidden_selected_gids = drupal_map_assoc(array_diff($items_gid, array_keys($options)));
      }

      if (empty($options)) {
        // There are no group, so don't show any input element.
        $type = 'item';
        $element['#description'] = t('There are no libraries you can select from.');
        $properties = array();
      }
      else {
        if (empty($element['#description'])) {
          $element['#description'] = t('Select the libraries this content should be associated with.');
        }

        $element['#multiple'] = $field['cardinality'] > 1 || $field['cardinality'] == FIELD_CARDINALITY_UNLIMITED;;
        // Don't make the field required, if there are no groups.
        $element['#required'] = $element['#required'] && !empty($options);

        $properties = _options_properties($type, $element['#multiple'], $element['#required'], $options);
        // If the element isn't required and cardinality is more than 1, and there
        // are some options, and a "none" option.
        if (!$element['#required'] && !$element['#multiple']) {
          // Use a dummy instance in order to use theme('options_none');
          $dummy_instance['widget']['type'] = 'options_select';
          $options = array('_none' => t('- All libraries -')) + $options;
        }
      }


      $element += array(
        // Input should be TRUE only if there are groups that can be selected.
        '#input' => $type != 'item',
        '#type' => $type,
        '#options' => $options,
        '#default_value' => $default_values,
        '#attributes' => array('class' => array('group-audience')),
        '#disabled' => empty($options),
        // Re-use options widget element validation, to correctly transform
        // submitted values from field => delta to delta => field.
        // @see options_field_widget()
        '#value_key' => 'gid',
        '#element_validate' => $type != 'item' ? array('options_field_widget_validate') : array(),
        '#properties' => $properties,
        // Add OG specific context.
        '#opt_group' => $opt_group,
        '#audience' => $audience,
        '#hidden_selected_gids' => $hidden_selected_gids,
      );

      $return = $element;
      break;
  }

  return $return;
}
